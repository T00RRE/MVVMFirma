<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:vm="clr-namespace:MVVMFirma.ViewModels"
    xmlns:v="clr-namespace:MVVMFirma.Views"
    xmlns:local="clr-namespace:MVVMFirma.Views">
                    
    <DataTemplate DataType="{x:Type vm:WszystkieTowaryViewModel}">
        <v:WszystkieTowaryView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyTowarViewModel}">
        <v:NowyTowarView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaFakturaViewModel}">
        <v:NowaFakturaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieFakturyViewModel}">
        <v:WszystkieFakturyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszyscyPracownicyViewModel}">
        <v:WszyscyPracownicyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyPracownikViewModel}">
        <v:NowyPracownikView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyStatusViewModel}">
        <v:NowyStatusView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieStatusyViewModel}">
        <v:WszystkieStatusyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowySposobPlatnosciViewModel}">
        <v:NowySposobPlatnosciView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieSposobyPlatnosciViewModel}">
        <v:WszystkieSposobyPlatnosciView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaReklamacjaViewModel}">
        <v:NowaReklamacjaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieReklamacjeViewModel}">
        <v:WszystkieReklamacjeView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyKontrahentViewModel}">
        <v:NowyKontrahentView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszyscyKontrahenciViewModel}">
        <v:WszyscyKontrahenciView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyRodzajViewModel}">
        <v:NowyRodzajView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieRodzajeViewModel}">
        <v:WszystkieRodzajeView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyAdresViewModel}">
        <v:NowyAdresView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieAdresyViewModel}">
        <v:WszystkieAdresyView/>
    </DataTemplate>
    <!--<DataTemplate DataType="{x:Type vm:NowyMagazynViewModel}">
        <v:NowyMagazynView/>
    </DataTemplate>-->
    <DataTemplate DataType="{x:Type vm:WszystkieMagazynyViewModel}">
        <v:WszystkieMagazynyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyStanMagazynowyViewModel}">
        <v:NowyStanMagazynowyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieStanyMagazynoweViewModel}">
        <v:WszystkieStanyMagazynoweView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:RaportSprzedażyViewModel}">
        <v:RaportSprzedażyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:RaportStanuMagazynuViewModel}">
        <v:RaportStanuMagazynuView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:RaportZamowienKlientaViewModel}">
        <v:RaportZamowienKlientaView/>
    </DataTemplate>

    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border 
            Background="Blue" 
            BorderBrush="LightGray" 
            BorderThickness="1" 
            CornerRadius="5" 
            Margin="4" 
            Padding="4" 
            SnapsToDevicePixels="True" 
            >
                        <TextBlock 
              FontSize="14"
              FontWeight="Bold"
              Foreground="White" 
              HorizontalAlignment="Center"  
              Text="{TemplateBinding Content}" 
              />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
              DockPanel.Dock="Top"
              ContentSource="Header" 
              ContentTemplate="{TemplateBinding HeaderTemplate}" 
              />
                        <ContentPresenter 
              ContentSource="Content" 
              ContentTemplate="{TemplateBinding ContentTemplate}" 
              />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
   

        <!-- Style dla przycisków w menu operacji -->
        <Style x:Key="OperationButtonStyle" TargetType="Button">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Padding" Value="10,8"/>
            <Setter Property="MinWidth" Value="150"/>
            <Setter Property="Background" Value="#2196F3"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <!-- Miejsce na ikonę -->
                                <Image x:Name="ButtonIcon" 
                                   Width="16" 
                                   Height="16" 
                                   Margin="0,0,8,0"
                                   VerticalAlignment="Center"/>
                                <ContentPresenter Grid.Column="1"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#1976D2"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#0D47A1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Nowy template dla listy komend -->
        <DataTemplate x:Key="CommandsTemplate">
            <ScrollViewer VerticalScrollBarVisibility="Auto">
                <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Button Style="{StaticResource OperationButtonStyle}"
                                Command="{Binding Path=Command}">
                                <StackPanel Orientation="Horizontal">
                                    <!-- Tu możesz dodać odpowiednią ikonę dla każdej operacji -->
                                    <TextBlock Text="{Binding Path=DisplayName}"
                                         FontSize="13"/>
                                </StackPanel>
                            </Button>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
        </DataTemplate>

        <!-- Styl dla panelu operacji -->
        <Style x:Key="OperationsPanelStyle" TargetType="Border">
            <Setter Property="Background" Value="#F5F5F5"/>
            <Setter Property="BorderBrush" Value="#E0E0E0"/>
            <Setter Property="BorderThickness" Value="0,0,1,0"/>
            <Setter Property="Padding" Value="8"/>
            <Setter Property="Margin" Value="0"/>
        </Style>

    
    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="120">
            <Button 
        Command="{Binding Path=CloseCommand}"
        Content="X"
        Cursor="Hand"
        DockPanel.Dock="Right"
        Focusable="False"
        FontFamily="Courier" 
        FontSize="9"
        FontWeight="Bold"  
        Margin="0,1,0,0"
        Padding="0"
        VerticalContentAlignment="Bottom"
        Width="16" Height="16" 
        />
            <ContentPresenter 
        Content="{Binding Path=DisplayName}" 
        VerticalAlignment="Center" 
        />
        </DockPanel>
    </DataTemplate>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
      IsSynchronizedWithCurrentItem="True" 
      ItemsSource="{Binding}" 
      ItemTemplate="{StaticResource ClosableTabItemTemplate}"
      Margin="4"
      />
    </DataTemplate>
    <Style TargetType="{x:Type local:WszystkieViewBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:WszystkieViewBase}">
                    <Grid Margin="0,10,0,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="34"/>
                            <RowDefinition Height="60"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <ToolBar Grid.Row="0">
                            <ToggleButton Content="Dodaj" Margin="0,2,0,2"/>
                            <ToggleButton Content="Edytuj" Margin="0,2,0,2"/>
                            <ToggleButton Content="Kasuj" Margin="0,2,0,2"/>
                            <ToggleButton Content="Odśwież" Command="{Binding OdswiezCommand}" Margin="0,2,0,2"/>
                        </ToolBar>
                        <StackPanel Grid.Row="1" Background="Azure">
                            <Label>Tu bedzie sortowanie i filtrowanie</Label>
                        </StackPanel>
                        <ContentPresenter Grid.Row="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>